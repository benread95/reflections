When would you want to use a remote repository rather than keeping all your
work local?

It would be useful to use a remote repository when you have to contribute
to your project from multiple computers, or when multiple people are working
on the same project.


Why might you want to always pull changes manually rather than having git
automatically stay up-to-date with your remote repository?

It's nice to know when changes are made to your local repository, otherwise
looking at your git log might confuse you if you haven't explicitly run a
git pull. Also, as it is effectively your private copy of the repository, it's
nice to be in control of it, and pull the latest changes when you need to.


Describe the differences between forks, clones and branches. When would you
use one instead of another?

Forks and clones are essentially the same thing. Forks are exclusive to
GitHub and are used to clone another persons repository to your account while
giving recognition to the original owner. A clone takes a full copy of a
repository either from GitHub to your local machine, or from your machine back
to your machine. You would use a fork when taking a copy of someones work from
GitHub, and a clone in every other situation when you wanted a copy of a
repository. A branch is used when you want to develop something for that
project while keeping a working copy of the project at the same time. For
example, for your changes to make any sense, multiple commits may be required
in order to successfully make all changes you want to make. You may be unsure
on how well a new feature of your project will work, and decide to make a new
branch in which you would commit several changes, which didn't affect the
original version until you were ready to merge the changes in.


What is the benefit of having a copy of the last known state of the remote
stored locally?

If you are about to be offline or without internet access for a while but
still want to work on your project, for example if you're about to get on a
plane or a train etc, then its useful to still have access to the last known
status of the online repository.


How would you collaborate without using Git or GitHub? What would be easier,
and what would be harder?

Without Git or GitHub, you could collaborate with other people using email or
other sharing applications such as DropBox. You could use other diff tools
such as the diff command on the terminal to merge files together. Without the
timestamps automatically added on commits on Git, you would have to manually
add date and times to each file to make sure you knew what changes were done
at what times, and which changes were intended to be the latest. It would be a
lot harder to manage the different files without git as it could get confusing
for larger projects, especially if more than 2 people were working together,
or if they didn't live/work near each other. It could be easier to get copies
of a project though, although cloning a repository and checking out master
isn't too difficult and time consuming, emailing or otherwise sending a zip
file of the whole project could be easier or faster.


When would you want to make changes in a separate branch rather than directly
in master? What benefits does each approach have?

You would more likely work in a different branch when developing a new feature
or change that would possibly take longer than one commit, and when multiple
people would be working on the project at the same time. If each person was
working on a different part of the project, then they could each have a
separate branch o simplify things. However, it can be slightly confusing when
pull requests come in and theres conflicts. This means it can sometimes take a
little while to merge all the code together, leading some people to prefer
working in the master branch.
